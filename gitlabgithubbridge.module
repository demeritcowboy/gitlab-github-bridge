<?php
/* vim: set shiftwidth=2 tabstop=2 softtabstop=2: */

/**
 * hook_mail
 */
function gitlabgithubbridge_mail($key, &$message, $params) {
  switch ($key) {
    case 'merge_objects_only':
      $message['subject'] = 'CiviCARROT failure report';
      $message['body'][] = 'Only merge_request objects are allowed as webhook triggers and the merge request must be in an open state.';
      break;

    case 'trigger_failure':
      $message['subject'] = 'CiviCARROT failure report';
      $message['body'][] = 'An error occurred starting the workflow:';
      $message['body'][] = $params['result'];
      break;
  }
}

function gitlabgithubbridge_webform_submission_insert($submission) {
  if (!is_a($submission, '\Drupal\webform\Entity\WebformSubmission')) {
    return;
  }
  // Only act on the merge request form.
  if ($submission->getWebform()->id() != 'civicarrot_dispatch_merge_reques') {
    return;
  }
  $repourl = $submission->getElementData('civicrm_2_contact_1_cg4_custom_11') ?? NULL;

  \Drupal::getContainer()->get('Drupal\gitlabgithubbridge\MergeRequestService')->run($repourl);
}
